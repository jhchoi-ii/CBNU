import cv2
import numpy as np
from scipy import signal
import matplotlib.pyplot as plt
import argparse

#
parser = argparse.ArgumentParser()
parser.add_argument('--path', default='./1.jpg', help='Image path.')
parser.add_argument('--out_png', default='./result.jpg', help='Image path.')
parser.add_argument('--temp_png', default='./temp.jpg', help='Image path.')
params = parser.parse_args()
image = cv2.imread(params.path)
work_image = np.copy(image)

cv2.imshow("Origin", work_image)

while True:
    k = cv2.waitKey(1)

    #file save
    if k == ord('w'):
        cv2.imwrite(params.out_png, work_image, [cv2.IMWRITE_PNG_COMPRESSION, 0])
    
    #Reset
    elif k == ord('1'):
        work_image = image
        cv2.imshow("Work", work_image)

    #Unsharp mask
    elif k == ord('2'):
        KSIZE = 11
        ALPHA = 5
        kernel = cv2.getGaussianKernel(KSIZE, 0)
        kernel = -ALPHA * kernel @ kernel.T
        kernel[KSIZE//2, KSIZE//2] += 1 + ALPHA

        work_image = cv2.filter2D(work_image, -1, kernel)

        cv2.imshow("Work", work_image)

    #Histogram Equalization-HSV
    elif k == ord('3'):
        hsv = cv2.cvtColor(work_image, cv2.COLOR_BGR2HSV)
        hsv[..., 2] = cv2.equalizeHist(hsv[..., 2])
        work_image = cv2.cvtColor(hsv, cv2.COLOR_HSV2BGR)
        cv2.imshow("Work", work_image)

    #Histogram Equalization-RGB R,G,B
    elif k == ord('4') or k == ord('5') or k == ord('6'):
        _k = int(k) - 52
        rgb = cv2.cvtColor(work_image, cv2.COLOR_BGR2RGB)
        rgb[:, :, _k] = cv2.equalizeHist(rgb[:, :, _k])
        work_image = cv2.cvtColor(rgb, cv2.COLOR_BGR2RGB)
        cv2.imshow("Work", work_image)

    #GRAY
    elif k == ord('a'):
        gray = cv2.cvtColor(work_image, cv2.COLOR_RGB2GRAY)
        work_image = gray
        cv2.imshow("Work", work_image)

    #BilateralFilter
    elif k == ord('s'):
        cv2.imwrite(params.temp_png, work_image, [cv2.IMWRITE_PNG_COMPRESSION, 0])

        sigmaColor = 1;
        sigmaSpace = 1;
        diameter = -1;

        _image = cv2.imread('./temp.jpg').astype(np.float32) / 255
        noised = (_image + 0.2 * np.random.rand(*_image.shape).astype(np.float32))
        noised = noised.clip(0, 1)

        bilat = cv2.bilateralFilter(noised, diameter, sigmaColor + 1, sigmaSpace)
        work_image = bilat
        #plt.imshow(bilat[:, :, [2, 1, 0]])
        cv2.imshow("Work", work_image[:, :, [2, 1, 0]])

    #Morphology
    elif k == ord('d'):
        cv2.imwrite(params.temp_png, work_image, [cv2.IMWRITE_PNG_COMPRESSION, 0])

        _image = cv2.imread('./temp.jpg', 0)
        _, binary = cv2.threshold(_image, -1, 255, cv2.THRESH_BINARY | cv2.THRESH_OTSU)
        _img  = cv2.morphologyEx(binary, cv2.MORPH_ERODE, (1, 1), iterations=1)
        work_image = _img
        cv2.imshow("Work", work_image)
        cv2.waitKey(0)

    #Canny
    elif k == ord('f'):
        cv2.imwrite(params.temp_png, work_image, [cv2.IMWRITE_PNG_COMPRESSION, 0])

        _image = cv2.imread('./temp.jpg', 0)
        cv2.GaussianBlur(_image, (3,3), 0)
        work_image = cv2.Canny(_image, 50, 80)

        cv2.imshow("Work", work_image)
        cv2.waitKey(0)

    #Sobel
    elif k == ord('g'):
        cv2.imwrite(params.temp_png, work_image, [cv2.IMWRITE_PNG_COMPRESSION, 0])

        _image = cv2.imread('./temp.jpg', 0)
        cv2.GaussianBlur(_image, (3,3), 0)
        work_image = cv2.Sobel(_image, cv2.CV_64F, 1, 1, 3)

        cv2.imshow("Work", work_image)
        cv2.waitKey(0)

    #Image subtract
    elif k == ord('q'):
        cv2.imwrite(params.temp_png, work_image, [cv2.IMWRITE_PNG_COMPRESSION, 0])

        _image = cv2.imread('./temp.jpg')
        target_image = cv2.imread('./2.jpg')

        resize_target_image = cv2.resize(target_image, (_image.shape[1], _image.shape[0]));

        work_image = cv2.absdiff(resize_target_image, _image)

        cv2.imshow("Work", work_image)
        cv2.waitKey(0)

    elif k == 27:
        break

cv2.destroyAllWindows()